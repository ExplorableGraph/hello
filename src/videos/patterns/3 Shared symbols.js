// Display all the (key, value) pairs of an in-memory object.
const explorableObject = {
  obj: {
    Alice: "Hello, Alice.",
    Bob: "Hello, Bob.",
    Carol: "Hello, Carol.",
  },

  async *[Symbol.asyncIterator]() {
    yield* Object.keys(this.obj);
  },

  async get(key) {
    return this.obj[key];
  },
};
for await (const key of explorableObject) {
  const value = await explorableObject.get(key);
  console.log(value);
}

// Display a set of (arg, result) pairs generated by a function.
const explorableFunction = {
  fn(arg) {
    return `Hello, ${arg}.`;
  },

  keys: ["Alice", "Bob", "Carol"],

  async *[Symbol.asyncIterator]() {
    yield* this.keys;
  },

  async get(key) {
    return this.fn(key);
  },
};
for await (const key of explorableFunction) {
  const value = await explorableObject.get(key);
  console.log(value);
}

// Display all the (file name, file contents) pairs in the current folder.
import { promises as fs } from "fs";
import path from "path";

const moduleFolder = path.dirname(fileURLToPath(import.meta.url));
const filesFolder = path.join(moduleFolder, "files");

const explorableFiles = {
  dirname: filesFolder,

  async *[Symbol.asyncIterator]() {
    yield* fs.readdir(this.dirname);
  },

  async get(key) {
    return String(await fs.readFile(path.join(this.dirname, key)));
  },
};
for await (const key of explorableFiles) {
  const value = await explorableFiles.get(key);
  console.log(value);
}

// Display all the (route, resource) results at a given net location.
// E.g. for site.com/a, site.com/b, site.com/c, get all those resources.
// import fetch from "node-fetch"; // Node doesn't have fetch yet.
const explorableSite = {
  url: "https://site.com",

  async *[Symbol.asyncIterator]() {
    yield* ["Alice", "Bob", "Carol"]; // How can we get this list automatically?
  },

  async get(key) {
    return await fetch(new URL(key, this.url).href);
  },
};
for await (const key of explorableSite) {
  const value = await explorableSite.get(key);
  console.log(value);
}
