// Display all the (key, value) pairs of an in-memory object.
const obj = {
  Alice: "Hello, Alice.",
  Bob: "Hello, Bob.",
  Carol: "Hello, Carol.",
};
for (const key in obj) {
  const value = obj[key];
  console.log(key, value);
}

// Display a set of (arg, result) pairs generated by a function.
function fn(arg) {
  return `Hello, ${arg}.`;
}
const args = ["Alice", "Bob", "Carol"];
for (const arg of args) {
  const result = fn(arg);
  console.log(arg, result);
}

// Display all the (file name, file contents) pairs in the current folder.
import { promises as fs } from "fs";
import path from "path";
import process from "process";
const folder = process.cwd();
const files = await fs.readdir(folder);
for (const fileName of files) {
  const filePath = path.join(folder, fileName);
  const buffer = await fs.readFiles(filePath);
  const text = String(buffer);
  console.log(fileName, text);
}

// Display all the (route, resource) results at a given net location.
// E.g. for site.com/a, site.com/b, site.com/c, get all those resources.
// import fetch from "node-fetch"; // Node doesn't have fetch yet.
const siteUrl = "https://site.com";
const routesUrl = new URL(".keys.json", siteUrl);
const routes = JSON.parse(await fetch(routesUrl.href));
for (const route of routes) {
  const pageUrl = new URL(route, siteUrl);
  const resource = await fetch(pageUrl.href);
  console.log(route, resource);
}
